[
  {
    "filepath": "2024/02-11/wizardzine.md",
    "category": [
      "productivity",
      "development"
    ],
    "url": "https",
    "text": "# Wizard Zines\n\nhttps://wizardzines.com/comics/ \n\nAn entertaining set of tipps for programmers - with a surprising amount of useful\nnice little stuff you might not have heard about even as a seasoned SoftwareEngineer ."
  },
  {
    "filepath": "2024/02-12/TheArtOfCodingACruelOptimism.md",
    "category": [
      "AI",
      "Coding",
      "Education",
      "Artificial Intelligence",
      "Code Generation"
    ],
    "url": "https",
    "title": "The Art of Coding - A Cruel Optimism?",
    "description": "An exploration into the potential and pitfalls of leveraging AI in the art of coding,particularly as a learning tool.",
    "text": "# The Art of Coding: A Cruel Optimism?\n\nhttps://medium.com/electronic-life/the-art-of-coding-a-cruel-optimism-59fc52571e91\n\n## Description\n\nAn exploration into the potential and pitfalls of leveraging AI in the art of coding, particularly as a learning tool.\n\n## Summary\n\n\"The Art of Coding: A Cruel Optimism?\" by Sunil Manghani narrates the creation and use of a custom GPT called *The Art of Coding*, designed as an AI assistant to teach coding. This tool targets individuals such as art professors interested in coding by offering explanations, feedback, and the ability to improve their Python programming skills. By leveraging the wealth of coding examples available, the AI demonstrates a natural proficiency in teaching coding, potentially revolutionizing software development by making it more accessible. The essay further discusses the broader implications of AI coding tools like GitHub Copilot and CodiumAI's AlphaCodium, pondering whether the ease and automation brought by such tools could undermine the quality and originality of coding.\n\nManghani draws on historical parallels such as Walter Benjamin's reflections on how photography changed art's nature and accessibility. Similarly, AI in coding could democratize the ability to program software, encouraging creativity and innovation outside traditional confines. However, the author also articulates concerns regarding 'cruel optimism,' a term by Lauren Berlant, highlighting the paradox where the pursuit of efficient coding through AI might hinder deep learning and understanding, leading to over-reliance and potential skill atrophy among programmers. The piece concludes by questioning if the initiative to make coding more accessible through AI assists in expanding creativity or if it inadvertently entrenches a dependency that could stifle the inherent artfulness and human insight in programming.\n\n// same thing as JSON:\n{\n    \"filename\": \"TheArtOfCodingACruelOptimism\",\n    \"category\": \"AI, Coding, Education, Artificial Intelligence, Code Generation\",\n    \"url\": \"https://medium.com/electronic-life/the-art-of-coding-a-cruel-optimism-59fc52571e91\"\n    \"title\": \"The Art of Coding: A Cruel Optimism?\"\n    \"description\": \"An exploration into the potential and pitfalls of leveraging AI in the art of coding, particularly as a learning tool.\"\n    \"summary\": \"The Art of Coding: A Cruel Optimism? by Sunil Manghani narrates the creation and use of a custom GPT called The Art of Coding, designed as an AI assistant to teach coding. This tool targets individuals such as art professors interested in coding by offering explanations, feedback, and the ability to improve their Python programming skills. By leveraging the wealth of coding examples available, the AI demonstrates a natural proficiency in teaching coding, potentially revolutionizing software development by making it more accessible. The essay further discusses the broader implications of AI coding tools like GitHub Copilot and CodiumAI's AlphaCodium, pondering whether the ease and automation brought by such tools could undermine the quality and originality of coding. Manghani draws on historical parallels such as Walter Benjamin's reflections on how photography changed art's nature and accessibility. Similarly, AI in coding could democratize the ability to program software, encouraging creativity and innovation outside traditional confines. However, the author also articulates concerns regarding 'cruel optimism,' a term by Lauren Berlant, highlighting the paradox where the pursuit of efficient coding through AI might hinder deep learning and understanding, leading to over-reliance and potential skill atrophy among programmers. The piece concludes by questioning if the initiative to make coding more accessible through AI assists in expanding creativity or if it inadvertently entrenches a dependency that could stifle the inherent artfulness and human insight in programming.\"\n}"
  },
  {
    "filepath": "2024/02-13/aem-links.md",
    "category": [
      "Adobe Experience Manager",
      "AEM",
      "Cheat Sheets",
      "Solutions"
    ],
    "url": "https",
    "title": "GitHub - paulrohrbeck/aem-links - Adobe Experience Manager links,cheat sheets and solutions to common problems.",
    "description": "Curated list of links,cheat sheets,and solutions to common problems for Adobe Experience Manager (AEM).",
    "text": "# GitHub - paulrohrbeck/aem-links: Adobe Experience Manager links, cheat sheets and solutions to common problems.\n\nhttps://github.com/paulrohrbeck/aem-links\n\n## Description\n\nCurated list of links, cheat sheets, and solutions to common problems for Adobe Experience Manager (AEM).\n\n## Summary\n\nThe GitHub repository \"paulrohrbeck/aem-links\" serves as a comprehensive resource hub for Adobe Experience Manager (AEM). It includes a meticulously compiled collection of links, cheat sheets, and solutions to tackle common problems encountered in AEM. Developed and maintained by Paul Rohrbeck, this repository aims to assist AEM developers, architects, and administrators by providing quick access to a wide range of valuable resources.\n\nThis repository covers various aspects of AEM, including component development, project planning, environment setup, and best practices. Among its contents, users can find detailed cheat sheets on topics such as HTL/Sightly, Core Components, Sling models, and Oak queries. It also provides links to external resources like official AEM documentation, community forums, and Adobe's technical blogs, which are essential for anyone working with Adobe's enterprise content management system.\n\nBeyond AEM-specific resources, \"paulrohrbeck/aem-links\" offers guidance on related technologies and tools like Dispatcher configuration, Sling Apache, and Maven project setup. By aggregating these resources in one accessible place, it streamlines the learning and development process for AEM practitioners, making it an invaluable reference for both newcomers and experienced professionals."
  },
  {
    "filepath": "2024/02-13/BedienungsanleitungSamsungGalaxyS7.md",
    "category": [
      "User Manual",
      "Instructions"
    ],
    "url": "https",
    "title": "Benutzerhandbuch Samsung Galaxy S7 (SM-G930F)",
    "description": "User manual for Samsung Samsung Galaxy S7 (SM-G930F) in German.",
    "text": "# Benutzerhandbuch Samsung Galaxy S7 (SM-G930F)\n\nhttps://downloadcenter.samsung.com/content/MC/201806/20180607135149892/DE/Ger/start_here.html\n\n## Description\n\nUser manual for Samsung Samsung Galaxy S7 (SM-G930F) in German.\n\n## Summary\n\nThe webpage provides a user manual for Samsung device Samsung Galaxy S7 (SM-G930F) in German. It includes chapters on\nbasic information,\napplications, settings, and the appendix. Users can access further information by clicking on the provided links or\nicons. The page is designed for easy navigation and access to detailed instructions for Samsung device users. The manual\ncovers essential topics for users to maximize their experience with Samsung devices."
  },
  {
    "filepath": "2024/02-23/introducing-supermaven-code-completion.md",
    "category": [
      "blog",
      "code completion tool"
    ],
    "url": "https",
    "title": "Supermaven",
    "description": "The fastest copilot. Supermaven uses a 300,000-token context window to provide the highest quality code completions.",
    "text": "# Supermaven\n\nhttps://supermaven.com/blog/introducing-supermaven\n\n## Description\n\nThe fastest copilot. Supermaven uses a 300,000-token context window to provide the highest quality code completions.\n\n## Summary\n\nSupermaven is a code completion tool that differentiates itself by offering a 300,000-token context window for more accurate suggestions. It addresses the limitations of other tools like Copilot by efficiently integrating information across a long context window, resulting in better completions even for complex and unique codebases.\n\nThe tool is designed to be fast and responsive, with custom infrastructure to handle large codebases while maintaining low latency. Supermaven also stands out by focusing on sequences of edits rather than just files, allowing it to quickly understand and assist with code refactoring tasks. Users can try Supermaven for themselves and provide feedback on its performance.\n\nOverall, Supermaven aims to provide a competitive alternative in the AI-powered code completion space, offering a unique approach to handling large context windows and delivering accurate suggestions based on user edits and repositories."
  },
  {
    "filepath": "2024/02-23/prompt-injection-via-unicode-tags.md",
    "category": [
      "Technology",
      "Social Media"
    ],
    "url": "https",
    "title": "Invisible Prompt Injection via Unicode Tags",
    "description": "a way of unnoticedly injecting prompts into OpenAI's API",
    "text": "{important: include this line to separate front matter from the content, but remove this comment}\n\n# Invisible Prompt Injection via Unicode Tags\n\nhttps://twitter.com/rez0__/status/1758556246850896185\n\n## Description\n\nIt's possible to inject prompts into OpenAI's API by using invisible unicode tags. This can be used to inject prompts into the API without the user noticing.\n\ndef convert_from_tag_chars(tagged_string):     return ''.join(chr(ord(ch) - 0xE0000) for ch in tagged_string if 0xE0061 <= ord(ch) <= 0xE007A)  tagged_input = input(\"Enter a string of tagged characters to convert to ASCII: \") ascii_output = convert_from_tag_chars(tagged_input) print(\"ASCII output:\", ascii_output)"
  },
  {
    "filepath": "2024/02-23/teaching-calculus-via-deepfakes.md",
    "category": [
      "Technology",
      "Social Media"
    ],
    "url": "https",
    "title": "JavaScript Disabled on Twitter",
    "description": "Teaching calculus with deep fakes",
    "text": "# Teaching calculus with deep fakes\n\nhttps://twitter.com/nisten/status/1760745075712381018"
  },
  {
    "filepath": "2024/03-05/create-a-custom-workflow-model-in-aem-with-a-full-code-coverage-unit-test.md",
    "category": [
      "Technology",
      "Coding",
      "AEM"
    ],
    "url": "https",
    "title": "Create a custom Workflow Model in AEM and add full code coverage with a Unit Test",
    "description": "Set up a custom Workflow Model in AEM that can be used by an Author to create Workflows in AEM's Touch UI and ensure full code coverage with a Unit Test.",
    "text": "# Create a custom Workflow Model in AEM and add full code coverage with a Unit Test\n\nhttps://medium.com/@jlanssie/create-a-custom-workflow-model-in-aem-with-a-full-code-coverage-unit-test-4178b2263b81\n\n## Description\n\nSet up a custom Workflow Model in AEM that can be used by an Author to create Workflows in AEM's Touch UI and ensure full code coverage with a Unit Test.\n\n## Summary\n\nIn this detailed guide, the author explains how to create a custom Workflow Model in AEM using Java classes and annotations. The tutorial covers setting up the Workflow Model, fetching and adapting payload data, and creating a helper method to set property values.\n\nThe tutorial also includes a section on writing Unit Tests for the Workflow Model using AemContext and Mockito for mocking objects. It provides detailed steps to verify the workflow with and without arguments, manage sessions, and handle exceptions.\n\nThe final part of the tutorial guides you through setting up the workflow in AEM's Touch UI, launching the workflow, and verifying the results in CRX/DE. This comprehensive guide is a great resource for AEM developers looking to create custom Workflow Models with full code coverage Unit Tests."
  },
  {
    "filepath": "2024/03-05/create-custom-aem-menu-tools-with-granite-ui-shell.md",
    "category": [
      "AEM",
      "Customization",
      "UI Development"
    ],
    "url": "https",
    "title": "Create Custom AEM Menu Tools with Granite UI Shell",
    "description": "Customize AEM with Custom Menu Tools",
    "text": "# Create Custom AEM Menu Tools with Granite UI Shell\n\nhttps://medium.com/@vsr061/create-custom-aem-menu-tools-with-granite-ui-shell-53c56e435f8a\n\n## Description\n\nCustomize AEM with Custom Menu Tools\n\n## Summary\n\nThe article discusses how to create custom menu tools in AEM using Granite UI Shell. It covers concepts like Sling Resource Merger and Granite UI to customize AEM. The author explains the process of overlaying AEM Tools nodes, creating custom nodes, and developing a landing page using Granite UI components. The tutorial provides insights into structuring the nodes, properties to add for menu items and tools, and the use of Granite Shell Page for rendering. The article is a helpful guide for developers looking to enhance and customize AEM menus with their own tools."
  },
  {
    "filepath": "2024/03-05/develop-front-end-components-with-aem-coral-ui.md",
    "category": [
      "AEM",
      "Front End Development",
      "Coral UI"
    ],
    "url": "https",
    "title": "Develop Front End Components with AEM Coral UI | by Viraj Rane | Medium",
    "description": "Coral UI is a library of touch-first web components,used to ease the work of a front end developer.",
    "text": "# Develop Front End Components with AEM Coral UI | by Viraj Rane | Medium\n\nhttps://medium.com/@vsr061/develop-front-end-components-with-aem-coral-ui-2da905096cce\n\n## Description\n\nCoral UI is a library of touch-first web components, used to ease the work of a front end developer.\n\n## Summary\n\nCoral UI provides simple and responsive components to maintain platform uniformity in AEM. The article discusses how to add custom components using Coral UI, like buttons and drop-downs, by leveraging client-side JS and integrating with AEM's existing structure.\n\nThe tutorial guides on adding buttons to the AEM Inbox action bar, explaining steps to create clientlibs, utilize Coral UI's library, and customize interactions for a seamless user experience. The use of Coral UI ensures consistency and eases the development process in AEM for front end components.\n\nViraj Rane, a Full Stack AEM Developer and Tech Enthusiast, shares insights on utilizing Coral UI for AEM front end development, emphasizing code management and component uniformity across the platform."
  },
  {
    "filepath": "2024/03-05/how-to-create-a-custom-tool-in-aem.md",
    "category": [
      "AEM",
      "Development"
    ],
    "url": "https",
    "title": "How to create a custom Tool in AEM | by Jeremy Lanssiers | Medium",
    "description": "We set up a custom tool in AEM’s Tool section for creating site-wide functionalities.",
    "text": "# How to create a custom Tool in AEM\n\nhttps://medium.com/@jlanssie/how-to-create-a-custom-tool-in-aem-78d14c1f66d5\n\n## Description\n\nWe set up a custom tool in AEM’s Tool section. This is useful for creating site-wide functionalities that do not fit in a component.\n\n## Summary\n\nIn this guide, Jeremy Lanssiers explains how to create a custom tool in AEM by overlaying standard libraries and creating specific XML files. The process involves setting up the workspace filter, creating XML files for the tool entry, and designing a Granite UI dialog page for the tool. The tutorial also covers creating packages for client-side interactions and providing a step-by-step approach to creating an interactive AEM tool. This comprehensive walkthrough helps developers understand the process of creating custom tools in AEM."
  }
]